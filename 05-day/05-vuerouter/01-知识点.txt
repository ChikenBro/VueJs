什么是前端渲染 什么是后端渲染

1.早期的网站开发是服务器渲染好url对应的html页面并返回给客户端展示
后端渲染  
  以前都是jsp/php开发的
后端路由
  后端处理url和页面之间的映射关系

2.随着Ajax的出现,有了前后端分离的开发模式
  后端只负责提供数据,不负责任何阶段的内容 
前端渲染
  客户机 静态资源服务器 提供API接口的服务器
  浏览器中显示的网页中的大部分内容，都是由前端写的js代码在浏览器中执行，最终渲染出来的网页。

3.单页面富应用阶段 simple page web application
  其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由
  整个网站只有一个html页面
  不同于前后端分离的静态资源服务器，它可能只有一个index.html+css+js
  他是先全部加载所有的html+css+js
  前端路由 当点击某个按钮 会生成一个url 抽取相关资源(vue里就是组件) 显示

如何改变URL使得页面不刷新
  1. location.hash = 'home'
  2. history.pushState({},'','home')
    他是利用栈的特点 取栈顶元素显示 所有对应的还有一个方法叫history.back()出栈
    history.go(-1) = history.back()
    history.go(1) = history.forward(-1)
  3. history.replaceState({},'','home')
    不同于pushState 它不保留历史记录 没有前进后退

安装vue-router
npm install vue-router --save

使用过程
   1.通过Vue.use(插件),安装插件
   2.创建路由对象
      配置路由和组件之间的映射关系
   3.将router对象导出并传入到Vue实例
   

   1.创建路由组件
   2.配置路由映射
   3.使用路由 通过<router-link>和<router-view>
  
router-link的属性
  tag: 决定标签种类 tag="button"
  replace: 改变URL的模式为history.replaceStatu 
  active-class:"class" 重新命名.router-link-active 
  
动态路由 看User.vue代码

打包文件解析想
  当前应用程序开发的所有代码(业务代码) app.js
  为了打包的代码做底层支撑 manifest.js
  第三方的东西 vue、vue-router、axios  vendor.js

路由懒加载
  1. 结合Vue的异步组件和Weback的代码分析
    const Home = resolve => { require.ensure(['../components/Home.vue], () =>
     {resolve(require('../components/Home.vue')) })}
  2.AMD写法
    const About = resolve => require(['../components/About.vue'],resolve);
  3.const Home = () => import('../components/Home.vue')

路由嵌套
  1.创建对应子组件 并且在路由映射中配置对应的路由
  2.在组件内部使用<router-view>标签和<router-link>标签

传递参数
  params 动态路由
  配置路由信息 /router/:id 
  传递的方式 在path后面跟上对应的值
  传递后形成的路径 /router/213,/router/acbc

  query
  配置路由信息 /router/ 普通的方式 
  传递的方式 对象中使用query的key作为传递方式
  传递后形成的路径 /router/?id=213,/router/?id=acbc

所有的组件都继承Vue类

导航守卫
  生命周期函数
    created() 组件被创建后执行
    mounted() template被挂载到DOM上后回调
    updated() 界面发生刷新
    destroyed() 组件消失

  路由独享守卫
  beforeEnter: (to, from, next) => {
    next();
  }

  组件守卫
  beforeRouteEnter(to,from,next){
    在渲染该组件对应的路由被confirm前调用
  },
  beforeRouteUpdate(to,from,next){
    路由改变但是该组件被复用
    如about/1 => about/2
  },
  beforeRouteLeave(to,from,next){
    导航离开该组件的对应路由时调用
  }

keep-alive
  要配合组件守卫beforeRouteLeave和 生命周期函数activated() {}实现
  activated() {} 和 deactivated() {} 只有组件保持了状态使用了keep-alive时才有效 
   
  属性
  include - 字符串或正则表达式 只有匹配的组件才会被缓存
  exclude

解决重复点击路由跳转报错问题 在main.js或者route文件夹中的index.js中加入这段代码
import Router from 'vue-router'
const originalPush = Router.prototype.push
Router.prototype.push = function push(location) {
  return originalPush.call(this, location).catch(err => err)
}
const originalReplace = Router.prototype.replace;
Router.prototype.replace = function replace(location) {
  return originalReplace.call(this, location).catch(err => err);
};

可以在build/webpack.base.conf.js 里 resolve中的alias起路径别名
只有import导入时起作用 在src里要加上~号